
apply plugin: 'android'
//apply plugin: 'robolectric'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':libraries:slidingmenu')
    compile project(':libraries:viewpagerindicator')
    compile project(':libraries:dragsortlistview')
    compile project(':libraries:pulltorefresh')
    compile project(':libraries:appmsg')
    compile project(':libraries:asynchttp')
    compile project(':libraries:daocore')
    compile project(':libraries:daogenerator')

//    robolectricCompile 'org.robolectric:robolectric:2.1'
//    robolectricCompile group: 'junit', name: 'junit', version: '4.11'

}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.0'

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"

        testPackageName "com.anyuaning.osp.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
//        testHandlingProfiling true
        testFunctionalTest true
    }
    buildTypes {
        release {
            runProguard false
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
    }

    lintOptions {
        abortOnError false
    }
}

task addTest {
    def src = ['src/androidTest/java']
    def file = file("main.iml")

    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}


