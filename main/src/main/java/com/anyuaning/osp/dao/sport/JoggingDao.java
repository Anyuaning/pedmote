package com.anyuaning.osp.dao.sport;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.anyuaning.osp.dao.DaoSession;

import com.anyuaning.osp.model.sport.Jogging;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JOGGING.
*/
public class JoggingDao extends AbstractDao<Jogging, Long> {

    public static final String TABLENAME = "JOGGING";

    /**
     * Properties of entity Jogging.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Steps = new Property(1, Long.class, "steps", false, "STEPS");
        public final static Property Distance = new Property(2, Float.class, "distance", false, "DISTANCE");
        public final static Property Pace = new Property(3, Long.class, "pace", false, "PACE");
        public final static Property Speed = new Property(4, Float.class, "speed", false, "SPEED");
        public final static Property Calories = new Property(5, Float.class, "calories", false, "CALORIES");
    };


    public JoggingDao(DaoConfig config) {
        super(config);
    }
    
    public JoggingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JOGGING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STEPS' INTEGER," + // 1: steps
                "'DISTANCE' REAL," + // 2: distance
                "'PACE' INTEGER," + // 3: pace
                "'SPEED' REAL," + // 4: speed
                "'CALORIES' REAL);"); // 5: calories
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOGGING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Jogging entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long steps = entity.getSteps();
        if (steps != null) {
            stmt.bindLong(2, steps);
        }
 
        Float distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(3, distance);
        }
 
        Long pace = entity.getPace();
        if (pace != null) {
            stmt.bindLong(4, pace);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(5, speed);
        }
 
        Float calories = entity.getCalories();
        if (calories != null) {
            stmt.bindDouble(6, calories);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Jogging readEntity(Cursor cursor, int offset) {
        Jogging entity = new Jogging( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // steps
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // distance
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // pace
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // speed
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5) // calories
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Jogging entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSteps(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDistance(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setPace(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSpeed(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setCalories(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Jogging entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Jogging entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
